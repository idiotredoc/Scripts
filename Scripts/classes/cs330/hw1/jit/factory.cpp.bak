#include "factory.h"
#include <algorithm>

using namespace std;

Factory::Factory ()
  : numOrders(0), maxOrders(4)
{
  orders = new Order[maxOrders];
}


Factory::Factory (std::string nm)
  : numOrders(0), maxOrders(4), name(nm)
{
  orders = new Order[maxOrders];
}

Factory::Factory (const Factory& f) //copy constructor
  : numOrders(f.numOrders), maxOrders(f.maxOrders)
{
  orders = new Order[numOrders+1];
  for (int i =0; i < numOrders; ++i)
    orders[i] = f.orders[i];
}

// Clear all orders for this factory
void Factory::clearOrders()
{
  numOrders = 0;
}

// Place an order for some number of items.
// If a prior order has been placed for these, this additional
// order adds to that prior one. The Item is also updated to reflect
// the change in total number of that item ordered by all factories.
void Factory::orderItems (Item* itemToOrder, int numToOrder)
{
  int k = 0;
  while (k < numOrders && orders[k].item->name != itemToOrder->name)
    ++k;
  if (k < numOrders && orders[k].item == itemToOrder)
    {
      // This factory already has an order for some of these items
      orders[k].amount += numToOrder;
    }
  else
    {
      // A new item for this factory - add it
      if (numOrders >= maxOrders)
	{
	  Order* newOrders = new Order[2*maxOrders];
	  copy (orders, orders+numOrders, newOrders);
	  delete [] orders;
	  orders = newOrders;
	  maxOrders *= 2;
	}
      orders[numOrders] = Order(itemToOrder, numToOrder);
      int k = numOrders;
      while (k > 0 && orders[k].item->name < orders[k-1].item->name)
	{
	  swap (orders[k], orders[k-1]);
	  --k;
	}
      ++numOrders;
    }

  // Update the total ordered of this item
  itemToOrder->amount += numToOrder;
}


// Access to Orders (in alphabetic order by item name)

Factory::OrderPosition Factory::begin() const
{
  return orders;
}


Factory::OrderPosition Factory::end() const
{
  return orders+numOrders;
}


Factory::OrderPosition Factory::find(Item* it) const
{
  OrderPosition pos = begin();
  while (pos != end() && pos->item != it)
    ++pos;
  return pos;
}



